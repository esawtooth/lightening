name: Deploy Infrastructure

on:
  push:
    branches:
      - main

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: infra
      - name: Ensure dev stack exists
        run: pulumi stack select dev --create --non-interactive
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure JWT signing key
        run: pulumi config set jwtSigningKey "$JWT_SIGNING_KEY" --secret
        working-directory: infra
        env:
          JWT_SIGNING_KEY: ${{ secrets.JWT_SIGNING_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure OpenAI API key
        run: pulumi config set openaiApiKey "${{ secrets.OPENAI_API_KEY }}" --secret
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      # Removed the duplicate pulumi up - only deploy in the final job

  build-images:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Azure Container Registry
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az acr login --name lightningacr
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      - name: Build and push worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.worker
          push: true
          tags: lightningacr.azurecr.io/worker-task:${{ github.sha }},lightningacr.azurecr.io/worker-task:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push chainlit client image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./chat_client/Dockerfile
          push: true
          tags: lightningacr.azurecr.io/chainlit-client:${{ github.sha }},lightningacr.azurecr.io/chainlit-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: infra
      - name: Ensure dev stack exists
        run: pulumi stack select dev --create --non-interactive
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure JWT signing key
        run: pulumi config set jwtSigningKey "$JWT_SIGNING_KEY" --secret
        working-directory: infra
        env:
          JWT_SIGNING_KEY: ${{ secrets.JWT_SIGNING_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure OpenAI API key
        run: pulumi config set openaiApiKey "${{ secrets.OPENAI_API_KEY }}" --secret
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure worker image
        run: pulumi config set workerImage "lightningacr.azurecr.io/worker-task:${{ github.sha }}"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure UI image
        run: pulumi config set uiImage "lightningacr.azurecr.io/chainlit-client:${{ github.sha }}"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Deploy stack
        run: pulumi up --yes
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Login to Azure
        run: |
          echo "üîê Logging into Azure CLI..."
          az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}
          az account set --subscription ${{ secrets.ARM_SUBSCRIPTION_ID }}
          echo "‚úÖ Azure CLI authentication successful"
      - name: Deploy Azure Functions
        run: |
          echo "üì¶ Installing Azure Functions Core Tools..."
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
          sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
          sudo apt-get update
          sudo apt-get install azure-functions-core-tools-4
          
          echo "üîç Finding Function App name..."
          FUNCTION_APP_NAME=$(az functionapp list --resource-group lightning --query '[0].name' --output tsv)
          echo "üìã Function App name: $FUNCTION_APP_NAME"
          
          if [ -z "$FUNCTION_APP_NAME" ]; then
            echo "‚ùå No Function App found in resource group 'lightning'"
            exit 1
          fi
          
          echo "üöÄ Deploying Azure Functions to $FUNCTION_APP_NAME..."
          cd azure-function
          func azure functionapp publish "$FUNCTION_APP_NAME" --python