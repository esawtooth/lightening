name: Deploy Infrastructure

on:
  push:
    branches:
      - main
jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: infra
      - name: Install function dependencies
        run: |
          pip install --upgrade pip
          pip install -r azure-function/requirements.txt \
            --target azure-function/.python_packages \
            --platform manylinux2014_x86_64 \
            --implementation cp \
            --python-version 3.10 \
            --only-binary=:all:
      - name: Ensure dev stack exists
        run: pulumi stack select dev --create --non-interactive
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure Entra ID
        run: |
          pulumi config set aadClientId "$AAD_CLIENT_ID" --secret
          pulumi config set aadClientSecret "$AAD_CLIENT_SECRET" --secret
          pulumi config set aadTenantId "$AAD_TENANT_ID"
        working-directory: infra
        env:
          AAD_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AAD_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AAD_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure OpenAI API key
        run: pulumi config set openaiApiKey "${{ secrets.OPENAI_API_KEY }}" --secret
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure Twilio credentials
        run: |
          pulumi config set twilioAccountSid "$TWILIO_ACCOUNT_SID" --secret
          pulumi config set twilioAuthToken "$TWILIO_AUTH_TOKEN" --secret
        working-directory: infra
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure worker image
        # Use a public image so the baseline deployment succeeds even
        # before the private registry images are built and pushed.
        run: pulumi config set workerImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure UI image
        # The real UI image is pushed after this job. Use a stable public
        # container here so `pulumi up` doesn't fail due to an inaccessible
        # image during the baseline deployment.
        run: pulumi config set uiImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure voice websocket image
        # Likewise use a public placeholder for the websocket container
        run: pulumi config set voiceWsImage "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure domain
        run: pulumi config set domain "vextir.com"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Refresh baseline infrastructure
        run: pulumi refresh --yes
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Deploy baseline infrastructure
        run: pulumi up --yes
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  build-images:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Azure Container Registry
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az acr login --name vextiracr
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      - name: Build and push worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.worker
          push: true
          tags: vextiracr.azurecr.io/worker-task:${{ github.sha }},vextiracr.azurecr.io/worker-task:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push chainlit client image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./chat_client/Dockerfile
          push: true
          tags: vextiracr.azurecr.io/chainlit-client:${{ github.sha }},vextiracr.azurecr.io/chainlit-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push voice websocket image
        uses: docker/build-push-action@v5
        with:
          context: ./agents/voice-agent/websocket-server
          push: true
          tags: vextiracr.azurecr.io/voice-ws:${{ github.sha }},vextiracr.azurecr.io/voice-ws:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push voice webapp image
        uses: docker/build-push-action@v5
        with:
          context: ./agents/voice-agent/webapp
          push: true
          tags: vextiracr.azurecr.io/voice-webapp:${{ github.sha }},vextiracr.azurecr.io/voice-webapp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-images
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install -r requirements.txt
        working-directory: infra
      - name: Install function dependencies
        run: |
          pip install --upgrade pip
          pip install -r azure-function/requirements.txt \
            --target azure-function/.python_packages \
            --platform manylinux2014_x86_64 \
            --implementation cp \
            --python-version 3.10 \
            --only-binary=:all:
      - name: Ensure dev stack exists
        run: pulumi stack select dev --create --non-interactive
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure Entra ID
        run: |
          pulumi config set aadClientId "$AAD_CLIENT_ID" --secret
          pulumi config set aadClientSecret "$AAD_CLIENT_SECRET" --secret
          pulumi config set aadTenantId "$AAD_TENANT_ID"
        working-directory: infra
        env:
          AAD_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AAD_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AAD_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure OpenAI API key
        run: pulumi config set openaiApiKey "${{ secrets.OPENAI_API_KEY }}" --secret
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure Twilio credentials
        run: |
          pulumi config set twilioAccountSid "$TWILIO_ACCOUNT_SID" --secret
          pulumi config set twilioAuthToken "$TWILIO_AUTH_TOKEN" --secret
        working-directory: infra
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure worker image
        run: pulumi config set workerImage "vextiracr.azurecr.io/worker-task:${{ github.sha }}"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure UI image
        run: pulumi config set uiImage "vextiracr.azurecr.io/chainlit-client:${{ github.sha }}"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure voice websocket image
        run: pulumi config set voiceWsImage "vextiracr.azurecr.io/voice-ws:${{ github.sha }}"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Configure domain
        run: pulumi config set domain "vextir.com"
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      - name: Refresh stack
        run: pulumi refresh --yes
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Deploy stack
        run: pulumi up --yes
        working-directory: infra
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}